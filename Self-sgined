$ openssl genrsa -out CA_key.pem 2048
$ openssl req -x509 -new -nodes -sha256 -days 3650 -key CA_key.pem -out CA_cert.pem -subj "/C=SG/ST=SG/L=SG/O=SG/CN=lab.ocp.php"
Create a new certificate signing request with the following steps:

$ openssl genrsa -out ssl.key 2048

$ openssl req -new -key ssl.key -out ssl.csr -subj "/CN=ocp-service.lab.ocp.php"        # change with the mirror registry FQDN

    Create the OpenSSL X509v3 extensions file with Subject Alternative Names:

Raw

vi openssl.cnf
authorityKeyIdentifier=keyid,issuer
keyUsage=digitalSignature
extendedKeyUsage=serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = ocp-service.lab.ocp.php
DNS.2 = api.int.lab.ocp.php
DNS.3 = *.apps.lab.ocp.php
DNS.4 = api.lab.ocp.php
DNS.5 = ocp-service
EOF

    Sign the certificate request using the CA and including the above extensions file. Note the parameter -extfile:

Raw

openssl x509 -req -in ssl.csr -CA CA_cert.pem -CAkey CA_key.pem -CAcreateserial -out ssl.pem -days 825 -sha256  -extfile openssl.cnf    # Certificate validity. Adjust accordingly. 
=====================================================================================================================
default ingress certificate - 
openssl genrsa -out ingress.key 2048
openssl req -new -key ingress.key -out ingress.crt -subj "/CN=*.apps.lab.ocp.php"
cat openssl-ocp.cnf
authorityKeyIdentifier=keyid,issuer
keyUsage=digitalSignature
extendedKeyUsage=serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = api.lab.ocp.php
DNS.2 = *.apps.lab.ocp.php
openssl x509 -req -in ingress.crt -CA CA_cert.pem -CAkey CA_key.pem -CAcreateserial -out ingress.key -days 825 -sha256  -extfile openssl-ocp.cnf


    Replace the mirror registry certificate and key with the new ones, and restart the service.
\==============================================================

    The self-signed CA certificate for the registry must be put in the /etc/pki/ca-trust/source/anchors/ folder.
    The update-ca-trust extract command must then be run to have the host trust the new CA certificate.
==============================================================
extract the key and cert
openssl rsa -in okd-CA_key.pem -text
openssl x509 -in okd-CA_key.pem -text 

https://www.golinuxcloud.com/openssl-view-certificate/
https://www.shellhacks.com/openssl-check-private-key-matches-ssl-certificate-csr/
=======================================================================================================================================
=======================================================================================================================================
========================================================================================================================================

📁 Prerequisites:
=================
Create a directory structure:

mkdir -p ca/{root,intermediate}/{certs,crl,newcerts,private}
touch ca/{root,intermediate}/index.txt
echo 1000 > ca/{root,intermediate}/serial
chmod 700 ca/{root,intermediate}/private

1. ✅ Root CA (Self-Signed)
=============================
# Generate Root Key
openssl genrsa -out ca/root/private/ca.key.pem 4096
# Generate Root Certificate
openssl req -x509 -new -nodes -key ca/root/private/ca.key.pem -sha256 -days 3650 \
  -subj "/C=IN/ST=TN/L=Chennai/O=MyOrg Root CA/CN=RootCA" \
  -out ca/root/certs/ca.cert.pem

2. ✅ Intermediate CA (Signed by Root)
==============================================
# Generate Intermediate Key
openssl genrsa -out ca/intermediate/private/intermediate.key.pem 4096

# Create Intermediate CSR
openssl req -new -key ca/intermediate/private/intermediate.key.pem \
  -subj "/C=IN/ST=TN/L=Chennai/O=MyOrg Intermediate CA/CN=IntermediateCA" \
  -out ca/intermediate/intermediate.csr.pem

# Sign Intermediate CSR with Root CA
openssl x509 -req -in ca/intermediate/intermediate.csr.pem \
  -CA ca/root/certs/ca.cert.pem -CAkey ca/root/private/ca.key.pem \
  -CAcreateserial -out ca/intermediate/certs/intermediate.cert.pem \
  -days 1825 -sha256
====================================================
3. ✅ Application CSR & Private Key

# Generate App Key
openssl genrsa -out app.key.pem 2048

# Generate App CSR
openssl req -new -key app.key.pem \
  -subj "/C=IN/ST=TN/L=Chennai/O=MyApp/CN=myapp.example.com" \
  -out app.csr.pem
4. ✅ Sign App CSR with Intermediate CA
# Sign App CSR using Intermediate CA
openssl x509 -req -in app.csr.pem \
  -CA ca/intermediate/certs/intermediate.cert.pem \
  -CAkey ca/intermediate/private/intermediate.key.pem \
  -CAcreateserial -out app.cert.pem -days 825 -sha256

✅ Resulting Files:
ca/root/certs/ca.cert.pem → Root CA cert

ca/intermediate/certs/intermediate.cert.pem → Intermediate CA cert

app.key.pem → App private key

app.cert.pem → App certificate (signed by Intermediate)

🔗 (Optional) Create Full Chain Certificate
==================================================================
cat app.cert.pem ca/intermediate/certs/intermediate.cert.pem ca/root/certs/ca.cert.pem > app.fullchain.pem
