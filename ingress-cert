üìÅ 1. Directory Setup
mkdir -p ca/{root,intermediate}/{certs,crl,newcerts,private}
touch ca/root/index.txt ca/intermediate/index.txt
echo 1000 > ca/root/serial
echo 1000 > ca/intermediate/serial
echo 1000 > ca/intermediate/crlnumber
chmod 700 ca/{root,intermediate}/private
üîê 2. Root CA Key + Self-Signed Certificate

openssl genrsa -out ca/root/private/ca.key.pem 4096

openssl req -x509 -new -nodes -key ca/root/private/ca.key.pem \
  -sha256 -days 3650 \
  -subj "/C=IN/ST=TN/L=Chennai/O=MyOrg Root CA/CN=RootCA" \
  -out ca/root/certs/ca.cert.pem \
  -extensions v3_ca \
  -config <(cat <<EOF
[ req ]
distinguished_name = req_distinguished_name
x509_extensions = v3_ca
prompt = no

[ req_distinguished_name ]
C=IN
ST=TN
L=Chennai
O=MyOrg Root CA
CN=RootCA

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical,CA:true
keyUsage = critical, keyCertSign, cRLSign
EOF
)
üõ†Ô∏è 3. Intermediate CA Key + CSR

openssl genrsa -out ca/intermediate/private/intermediate.key.pem 4096

openssl req -new -key ca/intermediate/private/intermediate.key.pem \
  -subj "/C=IN/ST=TN/L=Chennai/O=MyOrg Intermediate CA/CN=IntermediateCA" \
  -out ca/intermediate/intermediate.csr.pem
üîè 4. Sign Intermediate CA with Root (with correct extensions)

openssl x509 -req -in ca/intermediate/intermediate.csr.pem \
  -CA ca/root/certs/ca.cert.pem -CAkey ca/root/private/ca.key.pem \
  -CAcreateserial \
  -out ca/intermediate/certs/intermediate.cert.pem \
  -days 1825 -sha256 \
  -extfile <(cat <<EOF
basicConstraints=critical,CA:TRUE,pathlen:0
keyUsage=critical, keyCertSign, cRLSign
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
EOF
)
üì¶ 5. App Key + CSR with SAN

openssl genrsa -out app.key.pem 2048

openssl req -new -key app.key.pem -out app.csr.pem \
  -subj "/C=IN/ST=TN/L=Chennai/O=MyApp/CN=myapp.example.com" \
  -addext "subjectAltName=DNS:myapp.example.com,DNS:www.myapp.example.com,IP:192.168.1.100"
üßæ 6. Minimal OpenSSL Config for Intermediate CA to Sign App Cert
Save this as intermediate.cnf:


[ ca ]
default_ca = CA_default

[ CA_default ]
dir = ./ca/intermediate
certs = $dir/certs
new_certs_dir = $dir/newcerts
database = $dir/index.txt
serial = $dir/serial
crlnumber = $dir/crlnumber
certificate = $dir/certs/intermediate.cert.pem
private_key = $dir/private/intermediate.key.pem
default_days = 825
default_md = sha256
policy = policy_loose
copy_extensions = copy

[ policy_loose ]
commonName = supplied

[ usr_cert ]
basicConstraints = CA:FALSE
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = myapp.example.com
DNS.2 = www.myapp.example.com
IP.1 = 192.168.1.100
üñãÔ∏è 7. Sign App Cert with Intermediate CA (SAN preserved)

openssl ca -batch -config intermediate.cnf \
  -extensions usr_cert \
  -in app.csr.pem -out app.cert.pem
üîó 8. Create Full Chain

cat app.cert.pem ca/intermediate/certs/intermediate.cert.pem ca/root/certs/ca.cert.pem > app.fullchain.pem
‚úÖ 9. Verify Certificate and SAN
openssl verify -CAfile <(cat ca/intermediate/certs/intermediate.cert.pem ca/root/certs/ca.cert.pem) app.cert.pem
Should output:
app.cert.pem: OK

To confirm SAN:
openssl x509 -in app.cert.pem -noout -text | grep -A1 "Subject Alternative Name"

üìå Summary of Files
File	Purpose
ca/root/certs/ca.cert.pem	Root CA cert
ca/intermediate/certs/intermediate.cert.pem	Intermediate cert
app.cert.pem	App cert with SAN
app.fullchain.pem	Full chain for servers
Verification - 
=============================
1. openssl x509 -in app.cert.pem -noout -text | grep -A1 "Subject Alternative Name"
2. openssl verify -CAfile <(cat ca/intermediate/certs/intermediate.cert.pem ca/root/certs/ca.cert.pem) app.cert.pem
‚úÖ How to correctly verify your full chain:
1. Check if root CA is self-signed
openssl x509 -noout -issuer -subject -in ca/root/certs/ca.cert.pem
If issuer == subject, it's self-signed (expected for root CA).

2. Verify Intermediate Cert Against Root CA
openssl verify -CAfile ca/root/certs/ca.cert.pem ca/intermediate/certs/intermediate.cert.pem
‚úÖ Expected output:

ca/intermediate/certs/intermediate.cert.pem: OK
3. Verify App Cert Against Chain (Root + Intermediate)

cat ca/intermediate/certs/intermediate.cert.pem ca/root/certs/ca.cert.pem > ca_chain.pem

openssl verify -CAfile ca_chain.pem app.cert.pem

app.cert.pem: OK
==========================================================================


 
